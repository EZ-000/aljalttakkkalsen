from math import inf


def solution(n, s, a, b, fares):
    # 0부터 시작하는 인덱스
    s, a, b = s - 1, a - 1, b - 1

    # inf 로 초기화된 거리행렬
    # 자기 자신으로 가는 간선 가중치는 0
    graph = [[inf] * n for _ in range(n)]
    for i in range(n):
        graph[i][i] = 0

    # 거리행렬에 주어진 비용 넣기
    for fare in fares:
        u, v, w = fare
        graph[u - 1][v - 1] = graph[v - 1][u - 1] = w

    # 플로이드-와샬
    for k in range(n):          # 1. 모든 노드를 중간점(경로)으로 가정하면서
        for i in range(n):      # 2. 거리행렬을 순회
            for j in range(n):  # 3. 현재 거리행렬에 저장된 거리가 k를 거쳐가는 거리보다 멀면 갱신
                if graph[i][j] > graph[i][k] + graph[k][j]:
                    graph[i][j] = graph[i][k] + graph[k][j]
                # graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]) 시간 거의 두 배 걸림..

    # 출발점을 기준으로 어떤 지점 k를 거쳐 각각 a와 b로 가는 최소 비용을 탐색
    ans = inf
    for k in range(n):
        ans = min(ans, graph[s][k] + graph[k][a] + graph[k][b])

    return ans


"""
테스트 1 〉	통과 (0.06ms, 10.2MB)
테스트 2 〉	통과 (0.08ms, 10.3MB)
테스트 3 〉	통과 (0.05ms, 10.2MB)
테스트 4 〉	통과 (0.18ms, 10.2MB)
테스트 5 〉	통과 (0.51ms, 10.4MB)
테스트 6 〉	통과 (0.51ms, 10.1MB)
테스트 7 〉	통과 (0.60ms, 10.2MB)
테스트 8 〉	통과 (0.75ms, 10.2MB)
테스트 9 〉	통과 (1.02ms, 10.2MB)
테스트 10 〉	통과 (1.40ms, 10.2MB)
효율성  테스트
테스트 1 〉	통과 (160.17ms, 10.5MB)
테스트 2 〉	통과 (489.54ms, 11.1MB)
테스트 3 〉	통과 (1137.95ms, 11.4MB)
테스트 4 〉	통과 (1230.97ms, 11.4MB)
테스트 5 〉	통과 (1242.90ms, 11.5MB)
테스트 6 〉	통과 (1125.11ms, 11.4MB)
테스트 7 〉	통과 (1275.91ms, 13.9MB)
테스트 8 〉	통과 (1285.16ms, 14.1MB)
테스트 9 〉	통과 (1322.61ms, 13MB)
테스트 10 〉	통과 (1318.90ms, 13MB)
테스트 11 〉	통과 (1326.63ms, 12.9MB)
테스트 12 〉	통과 (1281.24ms, 12.7MB)
테스트 13 〉	통과 (1290.40ms, 12.7MB)
테스트 14 〉	통과 (1275.00ms, 12.8MB)
테스트 15 〉	통과 (1283.55ms, 12.7MB)
테스트 16 〉	통과 (1233.86ms, 11.4MB)
테스트 17 〉	통과 (1131.60ms, 11.4MB)
테스트 18 〉	통과 (1240.52ms, 11.1MB)
테스트 19 〉	통과 (1255.85ms, 11.4MB)
테스트 20 〉	통과 (1151.91ms, 11.7MB)
테스트 21 〉	통과 (1148.84ms, 11.6MB)
테스트 22 〉	통과 (1285.58ms, 12.7MB)
테스트 23 〉	통과 (1295.21ms, 12.8MB)
테스트 24 〉	통과 (1284.52ms, 12.7MB)
테스트 25 〉	통과 (1219.84ms, 11.1MB)
테스트 26 〉	통과 (1096.18ms, 10.9MB)
테스트 27 〉	통과 (1058.00ms, 10.6MB)
테스트 28 〉	통과 (1151.25ms, 10.6MB)
테스트 29 〉	통과 (157.91ms, 10.3MB)
테스트 30 〉	통과 (144.48ms, 10.3MB)
"""
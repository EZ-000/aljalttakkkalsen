def solution(n, k, cmd):
    graph = [i for i in range(n)]
    dels = []
    
    for c in cmd:
        if c.startswith('U'):
            k -= int(c[2:])
        elif c.startswith('D'):
            k += int(c[2:])
        elif c.startswith('C'):
            dels.append((k, graph[k]))
            graph.pop(k)
            if len(graph) <= k:
                k -= 1
        else:
            idx, d = dels.pop()
            graph.insert(idx, d)
            if idx <= k:
                k += 1
    return ''.join(['O' if num in graph else 'X' for num in range(n)])


# 정확성  테스트
# 테스트 1 〉	통과 (0.04ms, 10.4MB)
# 테스트 2 〉	통과 (0.03ms, 10.4MB)
# 테스트 3 〉	통과 (0.03ms, 10.3MB)
# 테스트 4 〉	통과 (0.03ms, 10.4MB)
# 테스트 5 〉	통과 (0.10ms, 10.2MB)
# 테스트 6 〉	통과 (0.11ms, 10.3MB)
# 테스트 7 〉	통과 (0.10ms, 10.4MB)
# 테스트 8 〉	통과 (0.11ms, 10.4MB)
# 테스트 9 〉	통과 (0.21ms, 10.4MB)
# 테스트 10 〉	통과 (0.11ms, 10.3MB)
# 테스트 11 〉	통과 (1.68ms, 10.3MB)
# 테스트 12 〉	통과 (1.45ms, 10.2MB)
# 테스트 13 〉	통과 (2.77ms, 10.4MB)
# 테스트 14 〉	통과 (1.41ms, 10.3MB)
# 테스트 15 〉	통과 (1.51ms, 10.4MB)
# 테스트 16 〉	통과 (1.55ms, 10.4MB)
# 테스트 17 〉	통과 (5.24ms, 10.3MB)
# 테스트 18 〉	통과 (5.24ms, 10.3MB)
# 테스트 19 〉	통과 (11.83ms, 10.5MB)
# 테스트 20 〉	통과 (5.31ms, 10.5MB)
# 테스트 21 〉	통과 (11.84ms, 10.4MB)
# 테스트 22 〉	통과 (5.23ms, 10.4MB)
# 테스트 23 〉	통과 (0.03ms, 10.4MB)
# 테스트 24 〉	통과 (0.03ms, 10.2MB)
# 테스트 25 〉	통과 (0.03ms, 10.2MB)
# 테스트 26 〉	통과 (0.03ms, 10.5MB)
# 테스트 27 〉	통과 (0.04ms, 10.5MB)
# 테스트 28 〉	통과 (0.04ms, 10.5MB)
# 테스트 29 〉	통과 (0.06ms, 10.4MB)
# 테스트 30 〉	통과 (0.05ms, 10.3MB)

# 효율성  테스트
# 테스트 1 〉	실패 (시간 초과)
# 테스트 2 〉	실패 (시간 초과)
# 테스트 3 〉	실패 (시간 초과)
# 테스트 4 〉	실패 (시간 초과)
# 테스트 5 〉	실패 (시간 초과)
# 테스트 6 〉	실패 (시간 초과)
# 테스트 7 〉	실패 (시간 초과)
# 테스트 8 〉	실패 (시간 초과)
# 테스트 9 〉	실패 (시간 초과)
# 테스트 10 〉	실패 (시간 초과)